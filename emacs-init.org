* Functions
** Open .emacs file
   #+BEGIN_SRC emacs-lisp
(defvar dot_emacs_file_path (concat user-emacs-directory "emacs-init.org"))
(defun dotemacsfile ()
  (interactive)
  (with-current-buffer (find-file dot_emacs_file_path)))
   #+END_SRC
** Reload emacs configuration
   #+BEGIN_SRC emacs-lisp
(defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/emacs-init.org")))
(global-set-key (kbd "C-c r") 'config-reload)
   #+END_SRC
* Shell
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(tty-color-mode  . -1))
#+END_SRC
* Terminal
** Default shell
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/zsh")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+END_SRC
** Open shell keybind [Mod+Return]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
* Keybindings
** Kill buffer and window [C-x C-k C-k]
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-k C-k") 'kill-buffer-and-window)
   #+END_SRC
* Org
** Org mode open links and allow shift select
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t
	   org-pretty-entities t
	   org-src-preserve-indentation t
	   org-src-window-setup 'current-window
	   org-edit-src-auto-save-idle-delay 60
	   org-return-follows-link t
	   org-support-shift-select t)
   #+END_SRC
** Language support
   #+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex . t)
   (python . t)
   (gnuplot . t)
   (shell . t)
   (sql . t)))
   #+END_SRC
* Editing
** Disable #backup
   #+BEGIN_SRC emacs-lisp
(setq delete-old-versions t
      kept-new-versions 6
      create-lockfiles nil
      kept-old-versions 2
      version-control t
      backup-directory-alist '((".*" . "~/.emacs.d/save/backup/")))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
   #+END_SRC
** Undo
   # Stop Emacs from losing undo information by
   # setting very high limits for undo buffers
   #+BEGIN_SRC emacs-lisp
(setq undo-limit 20000000)
(setq undo-strong-limit 40000000)
   #+END_SRC
** Disable overwrite key
   #+BEGIN_SRC emacs-lisp
(define-key global-map [(insert)] nil)
   #+END_SRC
   
** Overwrite selected text
   #+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
   #+END_SRC
   
** Indentation
   #+BEGIN_SRC emacs-lisp
(defun my-setup-indent (n)
    (setq-local coffee-tab-width n)
    (setq-local javascript-indent-level n)
    (setq-local js-indent-level n)
    (setq-local web-mode-markup-indent-offset n)
    (setq-local web-mode-css-indent-offset n)
    (setq-local web-mode-code-indent-offset n)
    (setq-local web-mode-attr-indent-offset n)
    (setq-local css-indent-offset n)
    (setq-local typescript-indent-level n)
    (setq-local lua-indent-level n)
    (setq-local evil-shift-width n)
    (setq-local rust-indent-offset n)
    (setq-local lisp-indent-offset n)
    (setq-local org-edit-src-content-indentation n)
    (setq-local org-src-tab-acts-natively t))

(defun set-my-indentation ()
  (interactive)
  ;; use space instead of tab
  (setq indent-tabs-mode t)
  ;; indent 4 spaces width
  (my-setup-indent 4))

;; prog-mode-hook requires emacs24+
(add-hook 'prog-mode-hook 'set-my-indentation)
;; a few major-modes does NOT inherited from prog-mode
(add-hook 'lua-mode-hook 'set-my-indentation)
(add-hook 'web-mode-hook 'set-my-indentation)
(add-hook 'org-mode-hook 'set-my-indentation)
(add-hook 'typescript-mode-hook 'set-my-indentation)
(add-hook 'c++-mode-hook 'set-my-indentation)
   #+END_SRC
** Encoding
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
* UI
** Default directory
   #+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
   #+END_SRC
** Disable startup screen
   #+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
   #+END_SRC
** Disable toolbar
   #+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
   #+END_SRC
** Disable scrolling acceleration
   #+BEGIN_SRC emacs-lisp
(setq mouse-wheel-progressive-speed nil)
   #+END_SRC
** Shorten yes/no
   #+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Disable error sound
   #+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
   #+END_SRC
** Display line numbers
   #+BEGIN_SRC emacs-lisp
(global-linum-mode t)
   #+END_SRC
** Disable word-wrap
#+BEGIN_SRC emacs-lisp
(toggle-truncate-lines)
#+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Iosevka-14" ))
   #+END_SRC
** Highlight
#+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
** Cursor
   #+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'box)
   #+END_SRC
** Time
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
(display-time-mode 1)
#+END_SRC
** ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
* Package repository settings
  #+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			    ("melpa" . "http://melpa.org/packages/")
			    ("elpy" . "http://jorgenschaefer.github.io/packages/")
			    ("org" . "http://orgmode.org/elpa/")))
(package-initialize)
  #+END_SRC
* Use-Package
  #+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
  )
(require 'use-package)
  #+END_SRC
* exwm
** COMMENT exwm
#+BEGIN_SRC emacs-lisp
(use-package exwm
    :ensure t
    :config
    (require 'exwm-config)
    (exwm-config-default)
    (require 'exwm-systemtray)
    (exwm-systemtray-enable)

    (setq exwm-workspace-number 1)

    (require 'exwm-randr)
    (setq exwm-randr-workspace-output-plist '(1 "HDMI-2"))
    (add-hook 'exwm-randr-screen-change-hook
	(defun exwm-auto-toggle-screen ()
	    (with-temp-buffer
		(call-process "xrandr" nil t nil)
		(beginning-of-buffer)
		(if (search-forward "eDP-1 connected" nil 'noerror)
		    (start-process-shell-command
			"xrandr" nil "xrandr --output HDMI-2 --off --output HDMI-1 --off --output DP-1 --off --output eDP-1 --mode 1920x1080 --pos 0x0 --rotate normal --output DP-2 --off")
		    (start-process-shell-command
			"xrandr" nil "xrandr --output HDMI-2 --primary --mode 2560x1440 --pos 0x0 --rotate normal --output HDMI-1 --off --output DP-1 --off --output eDP-1 --off --output DP-2 --off"))))
	)
    (exwm-randr-enable)
    )
#+END_SRC
** COMMENT Battery
#+BEGIN_SRC emacs-lisp
(use-package fancy-battery
    :if (package-installed-p 'exwm)
    :ensure t
    :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
	(fancy-battery-mode)
	(display-battery-mode)))
#+END_SRC
** COMMENT dmenu
#+BEGIN_SRC emacs-lisp
(use-package dmenu
    :if (package-installed-p 'exwm)
    :ensure t
    :bind
    ("s-d" . 'dmenu))
#+END_SRC
** COMMENT System monitor
#+BEGIN_SRC emacs-lisp
(use-package symon
    :if (package-installed-p 'exwm)
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC
** Default browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
    browse-url-generic-program "firefox")
#+END_SRC
* PATH
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (setq-default exec-path-from-shell-arguments nil)
    (exec-path-from-shell-initialize)
    )
  :ensure t)
#+END_SRC
* Async
#+BEGIN_SRC emacs-lisp
(use-package async
  :ensure t
  :init (dired-async-mode 1))
#+END_SRC
* evil
#+BEGIN_SRC emacs-lisp
(use-package evil
    :ensure t
    :config
    (define-key lisp-interaction-mode-map (kbd "C-j") nil)
    (define-key org-mode-map (kbd "C-j") nil)
    (global-set-key (kbd "C-j") 'evil-force-normal-state)
    (evil-mode 1))
#+END_SRC
* UI packages
** SMEX
   #+BEGIN_SRC emacs-lisp
(use-package smex
  :config
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  :ensure t)
   #+END_SRC

** Windmove. Navigate frames
   #+BEGIN_SRC emacs-lisp
(use-package windmove
  :config
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)
  :ensure t)
   #+END_SRC
** Theme
   #+BEGIN_SRC emacs-lisp
(use-package creamsody-theme
  :ensure t
  )
   #+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme)
    (setq powerline-default-separator nil)) 
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
    :init
    (ivy-mode 1)
    :ensure t)
#+END_SRC
** counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
    :after (ivy)
    :config
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x ,") 'counsel-rg)
    :ensure t)
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
(use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** Highlight cursor when switching buffers/workspaces
#+BEGIN_SRC emacs-lisp
(use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC
** Show hex color
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** Color parentheses depending on depth
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Editing packages
** Undo tree
    #+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))
    #+END_SRC

** Smartparens
   #+BEGIN_SRC emacs-lisp
(use-package smartparens
  :bind (:map smartparens-mode-map
	      ("C-M-<left>" . sp-backward-sexp)
	      ("C-M-<right>" . sp-forward-sexp)
	      ("C-S-<backspace>" . sp-backward-kill-sexp)
	      ("C-M-<down>" . sp-select-next-thing))
  :init
  (setq blink-matching-paren nil)
  (require 'smartparens-config)
  (set-face-attribute 'sp-show-pair-match-face nil :foreground "#CCCCCC" :background nil)
  (set-face-attribute 'sp-show-pair-mismatch-face nil :foreground "red" :background nil)
  :config
  (smartparens-global-mode t)
  (show-smartparens-global-mode t)
  (sp-local-pair 'c++-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))

  (defun my-create-newline-and-enter-sexp (&rest _ignored)
    "Open a new brace or bracket expression, with relevant newlines and indent. "
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))
  :ensure t
  :diminish smartparens-mode)
   #+END_SRC
** Latex
   #+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)

  (setq TeX-PDF-mode t)
  (setq TeX-view-program-selection '((output-pdf "Zathura"))))
   #+END_SRC
** Treat camelCase as multiple words
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
    :ensure t
    :bind
    ("s-e" . sudo-edit))
#+END_SRC
* Programming
** Version control
   #+BEGIN_SRC emacs-lisp
(use-package magit
    :config
    (when (eq system-type 'windows-nt)
	(setenv "GIT_ASKPASS" "git-gui--askpass")
	(setenv "SSH_ASKPASS" "git-gui--askpass")
	)
    (when (eq system-type 'gnu/linux)
	(exec-path-from-shell-copy-env "SSH_AGENT_PID")
	(exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
	)
    (setq magit-diff-refine-hunk t)
    :ensure t)
   #+END_SRC
   
** Flycheck
   #+BEGIN_SRC emacs-lisp
(use-package flycheck
    :ensure t
    :config
    ;; customize flycheck temp file prefix
    (setq-default flycheck-temp-prefix ".flycheck"))
   #+END_SRC
   
** Company. Autocompletion
   #+BEGIN_SRC emacs-lisp
(use-package company
    :ensure t
    :defer t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay                0.5
	company-minimum-prefix-length     2
	company-tooltip-limit             20
	company-tooltip-align-annotations t
	))
   #+END_SRC
   
** Projectile
   #+BEGIN_SRC emacs-lisp
(use-package projectile
    :ensure t
    :commands (projectile-global-mode projectile-ignored-projects projectile-compile-project)
    :init
    (projectile-global-mode)
    (global-set-key (kbd "<f5>") 'projectile-compile-project)
    (global-set-key (kbd "<f6>") 'next-error))
   #+END_SRC
** Rust
*** Rust-Mode
    #+BEGIN_SRC emacs-lisp
(use-package lsp-mode
    :demand t)
(use-package lsp-rust
    :demand t)
(use-package flycheck-rust
    :demand t)
(use-package racer
    :hook ((rust-mode . racer-mode)
	      (racer-mode . company-mode)
	      (racer-mode . (lambda() (setq-local eldoc-documentation-function 'lsp--on-hover))))
    :config
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
    (setq company-tooltip-align-annotations t)
    
    :ensure t)

(use-package rust-mode
    :hook ((rust-mode . (lambda ()
			    (lsp-rust-enable)
			    (flycheck-mode)
			    (flycheck-rust-setup)
			    (setq-local rust-format-on-save t)
			    )))
    :config
    (setq rust-indent-method-chain t)
    )

    #+END_SRC
    
** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
    :ensure t
)
#+END_SRC
** GLSL
#+BEGIN_SRC emacs-lisp
(use-package glsl-mode
    :ensure t
)
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))
(use-package tide
    :ensure t
    :config
    (setq company-tooltip-align-annotations t)
    (add-hook 'before-save-hook 'tide-format-before-save)
    (add-hook 'typescript-mode-hook #'setup-tide-mode))
(use-package web-mode
    :hook (web-mode . (lambda ()
			  (when (string-equal "tsx" (file-name-extension buffer-file-name))
			      (setup-tide-mode))))
    :mode ("\\.tsx\\'" . web-mode)
    :ensure t
    :config
    (flycheck-add-mode 'typescript-tslint 'web-mode))
#+END_SRC
* Customizations
  #+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  #+END_SRC
