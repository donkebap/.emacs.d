* Package repository settings
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives
'( ("gnu" . "http://elpa.gnu.org/packages/")
   ("melpa" . "http://melpa.milkbox.net/packages/")
   ("elpy" . "https://jorgenschaefer.github.io/packages/")
   ("org" . "http://orgmode.org/elpa/")))
(package-initialize)
#+END_SRC

* Use-Package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
  )
#+END_SRC

* Keybindings
** Open file in new window [C-x M-f]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
#+END_SRC

** Switch buffers [C-TAB/C-S-TAB]
#+BEGIN_SRC emacs-lisp
(global-set-key [C-tab] 'other-window)
(global-set-key [C-S-tab]
    (lambda ()
      (interactive)
      (other-window -1)))
#+END_SRC

** Delete line [C-d]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-d") 'kill-whole-line)
#+END_SRC

** Jump to start of code [C-a]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-a") 'back-to-indentation)
#+END_SRC

** Kill buffer and window [C-x C-k k]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-k k") 'kill-buffer-and-window)
#+END_SRC

* Org
** Org mode open links and allow shift select
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-pretty-entities t
      org-src-preserve-indentation t
      org-src-window-setup 'current-window
      org-edit-src-auto-save-idle-delay 60
      org-return-follows-link t
      org-support-shift-select t)
#+END_SRC

** Language support
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex . t)
   (python . t)
   (gnuplot . t)
   (sh . t)
   (sql . t)))
#+END_SRC

* UI
** Default directory
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC

** Disable startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Maximize window at startup
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Disable toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Disable scrolling acceleration
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

** Shorten yes/no
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Disable error sound
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Hide wrapped-line-arrow
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

** Display line numbers
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Inconsolata 13"))
#+END_SRC

** Centered window
#+BEGIN_SRC emacs-lisp
(use-package centered-window-mode
  :init
  (defun cwm/center ()
    (set-fringe-mode
     (let ((right_fringe
        (/ (- (frame-pixel-width)
          (* 110 (frame-char-width)))
           2)))
       (cons (- right_fringe 50) right_fringe))
     ))
  :config
  (centered-window-mode t)
  :ensure t
  :diminish centered-window-mode
  )
#+END_SRC

** Adaptive wrap lines
#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap
  :init
  (define-globalized-minor-mode adaptive-wrap-global-mode
    adaptive-wrap-prefix-mode
    adaptive-wrap-prefix-mode)
  :bind
  :config
  (adaptive-wrap-global-mode)
  :ensure t
  )
#+END_SRC

** Windmove. Navigate frames
#+BEGIN_SRC emacs-lisp
(use-package windmove
  :config
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)
  :ensure t
  )
#+END_SRC

** DIRED+. Extension to dired
#+BEGIN_SRC emacs-lisp
(use-package dired+
  :ensure t
  )
#+END_SRC

** IDO
#+BEGIN_SRC emacs-lisp
(use-package ido
  :config
  (ido-mode t)
  :ensure t
  )
#+END_SRC

** SMEX
#+BEGIN_SRC emacs-lisp
(use-package smex
  :config
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  :ensure t
  )
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :ensure t
  )
#+END_SRC

** Spaceline Modeline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :config
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (custom-set-faces
   '(spaceline-highlight-face ((t (:foreground "yellow" :background "red")))))
  :ensure t
  )
#+END_SRC

* Editing
** C-Arrow navigation
#+BEGIN_SRC emacs-lisp
; Navigation
(defun previous-blank-line ()
  "Moves to the previous line containing nothing but whitespace."
  (interactive)
  (search-backward-regexp "^[ \t]*\n"))

(defun next-blank-line ()
  "Moves to the next line containing nothing but whitespace."
  (interactive)
  (forward-line)
  (search-forward-regexp "^[ \t]*\n")
  (forward-line -1))

(define-key global-map [C-right] 'forward-word)
(define-key global-map [C-left] 'backward-word)
(define-key global-map [C-up] 'previous-blank-line)
(define-key global-map [C-down] 'next-blank-line)
#+END_SRC

** Undo
*** Undo limit
# Stop Emacs from losing undo information by
# setting very high limits for undo buffers
#+BEGIN_SRC emacs-lisp
(setq undo-limit 20000000)
(setq undo-strong-limit 40000000)
#+END_SRC

*** Undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))
#+END_SRC

** Disable overwrite key
#+BEGIN_SRC emacs-lisp
(define-key global-map [(insert)] nil)
#+END_SRC

** Overwrite selected text
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Move lines with ALT
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :config (drag-stuff-global-mode 1)
  :ensure t
  )
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :bind (:map smartparens-mode-map
          ("C-M-<left>" . sp-backward-sexp)
          ("C-M-<right>" . sp-forward-sexp)
          ("C-S-<backspace>" . sp-backward-kill-sexp)
          ("C-M-<down>" . sp-select-next-thing))
  :init
  (setq blink-matching-paren nil)
  (require 'smartparens-config)
  (set-face-attribute 'sp-show-pair-match-face nil :foreground "#CCCCCC" :background nil)
  (set-face-attribute 'sp-show-pair-mismatch-face nil :foreground "red" :background nil)
  :config
  (smartparens-global-mode t)
  (show-smartparens-global-mode t)
  :ensure t
  :diminish smartparens-mode
  )
#+END_SRC

** Cursor
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'box)
(set-face-attribute 'region nil :background "turquoise")
(set-cursor-color "orange")
#+END_SRC

* Functions
** Open .emacs file
#+BEGIN_SRC emacs-lisp
(defvar dot_emacs_file_path (concat user-emacs-directory "emacs-init.org"))
(defun dotemacsfile ()
  (interactive)
  (with-current-buffer (find-file dot_emacs_file_path))
  )
#+END_SRC

* Programming
** Highlight TODO/NOTE
#+BEGIN_SRC emacs-lisp
(setq fixme-modes '(rust-mode
                    c++-mode
                    c-mode
                    emacs-lisp-mode))
(make-face 'font-lock-fixme-face)
(make-face 'font-lock-note-face)
(mapc (lambda (mode)
	(font-lock-add-keywords
	 mode
	 '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
	   ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
      fixme-modes)
(modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "Green" nil nil t nil t nil nil)
#+END_SRC

** Debugging
#+BEGIN_SRC emacs-lisp
(use-package realgud
  :ensure t
  )
#+END_SRC

** Version control
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  )
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode)
  :ensure t
  :config
  )
#+END_SRC

** Company. Autocompletion
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :init (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq company-idle-delay                0.1
	company-minimum-prefix-length     2
	company-tooltip-limit             20
	company-tooltip-align-annotations t
	)
  (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
  )
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :commands (projectile-global-mode projectile-ignored-projects projectile-compile-project)
  :init
  (projectile-global-mode)
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
  :config
  (setq projectile-completion-system 'helm)
  (setq projectile-switch-project-action 'helm-projectile))

  (global-set-key (kbd "<f6>") 'next-error)
#+END_SRC

** Rust
*** Flycheck-Rust
#+BEGIN_SRC emacs-lisp
(when (package-installed-p 'flycheck)
  (use-package flycheck-rust
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
    :ensure t
    )
  )
#+END_SRC

*** Rust-Mode
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :config
  ;; Cargo
  (use-package cargo
    :config
    (add-hook 'rust-mode-hook 'cargo-minor-mode)
    :ensure t
    )
  
  ;; Racer
  (use-package racer
    :config
    (setq racer-cmd "~/.cargo/bin/racer")
    (setq racer-rust-src-path "~/Applications/Rust stable source/src/")
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'racer-mode-hook #'company-mode)
    :ensure t
    )
  )
#+END_SRC

** C/C++
*** Flycheck-pkg-config
#+BEGIN_SRC emacs-lisp
(when (package-installed-p 'flycheck)
  (use-package flycheck-pkg-config
    :ensure t))
#+END_SRC

*** Hooks
#+BEGIN_SRC emacs-lisp
(defun kill-line_kbd() 
  (define-key c-mode-map "\C-d" 'kill-whole-line)
  (define-key c-mode-map "\C-d" 'kill-whole-line))

(defun c-hooks()
  (kill-line_kbd))

(add-hook 'c-mode-hook 'c-hooks)
(add-hook 'c++-mode-hook 'c-hooks)
#+END_SRC

*** SR-Speedbar. Project browser for C
#+BEGIN_SRC emacs-lisp
(use-package sr-speedbar
  :ensure t
  )
#+END_SRC

*** Company-C
#+BEGIN_SRC emacs-lisp
(when (package-installed-p 'company)
  (use-package company-c-headers
    :ensure t
    :config
    (add-to-list 'company-backends 'company-c-headers)
    (add-to-list 'company-c-headers-path-system "/usr/include/c++/5.2.1")
    )
  )
#+END_SRC

** Webdev
*** Web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t)
#+END_SRC

*** JavaScript, ES6, Typescript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :config
  ;;(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  ;;(add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
  ;;(add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))
  (add-hook 'js-mode-hook 'js2-minor-mode)
)

(use-package typescript-mode
  :ensure t)

(use-package tide
  :ensure t
  :config
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)

  ;; format options
  (setq tide-format-options 
    '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t 
      :placeOpenBraceOnNewLineForFunctions nil))
  
  (add-hook 'js2-mode-hook #'setup-tide-mode)
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
  (add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "jsx" (file-name-extension buffer-file-name))
              (setup-tide-mode))))
)
#+END_SRC

* Customizations
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC
