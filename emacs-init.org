
* Package-Mode
#+BEGIN_SRC emacs-lisp
(setq PACKAGEMODE (or (getenv "EMACSPACKAGEMODE") "PRIVATE"))
#+END_SRC
* Server
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
  (server-start))
#+END_SRC
* Package repository settings
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives
'( ("gnu" . "http://elpa.gnu.org/packages/")
   ;("melpa-stable" . "https://stable.melpa.org/packages/")
   ("melpa" . "https://melpa.org/packages/")
   ("elpy" . "https://jorgenschaefer.github.io/packages/")
   ("org" . "http://orgmode.org/elpa/")))
(package-initialize)
#+END_SRC

* Use-Package
#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
  )
(require 'use-package)
#+END_SRC

* Keybindings
** Open file in new window [C-x M-f]
#+BEGIN_SRC emacs-lisp
(defun open-file-in-new-vertical-split()
  (interactive)
  (select-window (split-window-right))
  (ido-find-file)
  )

(global-set-key (kbd "C-x M-f") 'open-file-in-new-vertical-split)
#+END_SRC

** Switch buffers [C-TAB/C-S-TAB]
#+BEGIN_SRC emacs-lisp
(global-set-key [C-tab] 'other-window)
(global-set-key [C-S-tab]
    (lambda ()
      (interactive)
      (other-window -1)))
#+END_SRC

** Delete line [C-d]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-d") 'kill-whole-line)
#+END_SRC

** Jump to start of code [C-a]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-a") 'back-to-indentation)
#+END_SRC

** Kill buffer and window [C-x C-k C-k]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-k C-k") 'kill-buffer-and-window)
#+END_SRC

* Org
** Org mode open links and allow shift select
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-pretty-entities t
      org-src-preserve-indentation t
      org-src-window-setup 'current-window
      org-edit-src-auto-save-idle-delay 60
      org-return-follows-link t
      org-support-shift-select t)
#+END_SRC

** Language support
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex . t)
   (python . t)
   (gnuplot . t)
   (sh . t)
   (sql . t)))
#+END_SRC

* UI
** Default directory
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'gnu/linux)
  (setq default-directory "~/"))
(if (eq system-type 'windows-nt)
  (setq default-directory "%userprofile%"))
#+END_SRC

** Disable startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
;;(use-package monokai-theme
;;  :ensure t
;;  )
(use-package apropospriate-theme
  :ensure t
  :config 
  (load-theme 'apropospriate-dark t)
)
#+END_SRC

** Maximize window at startup
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Disable toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Disable find-file auto-search
#+BEGIN_SRC emacs-lisp
(setq ido-auto-merge-work-directories-length -1)
#+END_SRC
** Disable scrolling acceleration
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

** Shorten yes/no
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Disable error sound
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Hide wrapped-line-arrow
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

** Display line numbers
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Inconsolata 13"))
;(set-face-attribute 'default t :font "DejaVu Sans Mono-12")
;(set-frame-font "DejaVu Sans Mono-11" nil t)
#+END_SRC

** Centered window
#+BEGIN_SRC emacs-lisp
(use-package centered-window-mode
  :init
  (defun cwm/center ()
    (set-fringe-mode
     (let ((right_fringe
        (/ (- (frame-pixel-width)
          (* 110 (frame-char-width)))
           2)))
       (cons (- right_fringe 50) right_fringe))
     ))
  :config
  (centered-window-mode t)
  :ensure t
  :diminish centered-window-mode
  )
#+END_SRC

** Adaptive wrap lines
#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap
  :init
  (define-globalized-minor-mode adaptive-wrap-global-mode
    adaptive-wrap-prefix-mode
    adaptive-wrap-prefix-mode)
  :bind
  :config
  (adaptive-wrap-global-mode)
  :ensure t
  )
#+END_SRC

** Windmove. Navigate frames
#+BEGIN_SRC emacs-lisp
(use-package windmove
  :config
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)
  :ensure t
  )
#+END_SRC

** DIRED+. Extension to dired
#+BEGIN_SRC emacs-lisp
(use-package dired+
  :ensure t
  )
#+END_SRC

** IDO
#+BEGIN_SRC emacs-lisp
(use-package ido
  :config
  (ido-mode t)
  :ensure t
  )
#+END_SRC

** SMEX
#+BEGIN_SRC emacs-lisp
(use-package smex
  :config
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  :ensure t
  )
#+END_SRC

** Spaceline Modeline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :config
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (custom-set-faces
   '(spaceline-highlight-face ((t (:foreground "yellow" :background "red")))))
  :ensure t
  )
#+END_SRC

** ToggleWindowSplit [C-x |]
#+BEGIN_SRC emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

(global-set-key (kbd "C-x |") 'toggle-window-split)
#+END_SRC

* Editing
** Disable #backup
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions t
  kept-new-versions 6
  create-lockfiles nil
  kept-old-versions 2
  version-control t
  backup-directory-alist '((".*" . "~/.emacs.d/save/backup/")))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC
** C-Arrow navigation
#+BEGIN_SRC emacs-lisp
; Navigation
(defun previous-blank-line ()
  "Moves to the previous line containing nothing but whitespace."
  (interactive)
  (search-backward-regexp "^[ \t]*\n"))

(defun next-blank-line ()
  "Moves to the next line containing nothing but whitespace."
  (interactive)
  (forward-line)
  (search-forward-regexp "^[ \t]*\n")
  (forward-line -1))

(define-key global-map [C-right] 'forward-word)
(define-key global-map [C-left] 'backward-word)
(define-key global-map [C-up] 'previous-blank-line)
(define-key global-map [C-down] 'next-blank-line)
#+END_SRC

** Undo
*** Undo limit
# Stop Emacs from losing undo information by
# setting very high limits for undo buffers
#+BEGIN_SRC emacs-lisp
(setq undo-limit 20000000)
(setq undo-strong-limit 40000000)
#+END_SRC

*** Undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))
#+END_SRC

** Disable overwrite key
#+BEGIN_SRC emacs-lisp
(define-key global-map [(insert)] nil)
#+END_SRC

** Overwrite selected text
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Move lines with ALT
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :config (drag-stuff-global-mode 1)
  :ensure t
  )
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :bind (:map smartparens-mode-map
          ("C-M-<left>" . sp-backward-sexp)
          ("C-M-<right>" . sp-forward-sexp)
          ("C-S-<backspace>" . sp-backward-kill-sexp)
          ("C-M-<down>" . sp-select-next-thing))
  :init
  (setq blink-matching-paren nil)
  (require 'smartparens-config)
  (set-face-attribute 'sp-show-pair-match-face nil :foreground "#CCCCCC" :background nil)
  (set-face-attribute 'sp-show-pair-mismatch-face nil :foreground "red" :background nil)
  :config
  (smartparens-global-mode t)
  (show-smartparens-global-mode t)
  :ensure t
  :diminish smartparens-mode
  )
#+END_SRC

** Cursor
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'box)
;(set-face-attribute 'region nil :background "turquoise")
;(set-cursor-color "orange")
#+END_SRC

** Indentation
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil
                tab-width 2
                indent-line-function 'insert-tab)
#+END_SRC
* Functions
** Open .emacs file
#+BEGIN_SRC emacs-lisp
(defvar dot_emacs_file_path (concat user-emacs-directory "emacs-init.org"))
(defun dotemacsfile ()
  (interactive)
  (with-current-buffer (find-file dot_emacs_file_path))
  )
#+END_SRC

* Programming
** Highlight TODO/NOTE
#+BEGIN_SRC emacs-lisp
(setq fixme-modes '(rust-mode
                    c++-mode
                    c-mode
                    emacs-lisp-mode))
(make-face 'font-lock-fixme-face)
(make-face 'font-lock-note-face)
(mapc (lambda (mode)
	(font-lock-add-keywords
	 mode
	 '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
	   ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
      fixme-modes)
(modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "Green" nil nil t nil t nil nil)
#+END_SRC

** Version control
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  )
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
;(use-package yasnippet
;  :config
;  (yas-global-mode 1)
;  :ensure t
;)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode)
  :ensure t
  :config
    ;; customize flycheck temp file prefix
    (setq-default flycheck-temp-prefix ".flycheck")
  )
#+END_SRC

** Company. Autocompletion
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :init (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq company-idle-delay                0.1
	company-minimum-prefix-length     2
	company-tooltip-limit             20
	company-tooltip-align-annotations t
	)
  ;(global-set-key (kbd "TAB") #'company-indent-or-complete-common)
  )
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :commands (projectile-global-mode projectile-ignored-projects projectile-compile-project)
  :init
  (projectile-global-mode)
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
  :config
  (setq projectile-completion-system 'helm)
  (setq projectile-switch-project-action 'helm-projectile)
  (setq projectile-indexing-method 'alien)
)


(global-set-key (kbd "<f6>") 'next-error)
#+END_SRC
** Helm with ripgrep
#+BEGIN_SRC emacs-lisp
(use-package helm
  :config
  ;(setq helm-grep-ag-command "TERM=eterm-color rg --color=always --smart-case --no-heading --line-number %s %s %s")
  (helm-mode 1)
  :ensure t
  )

(use-package helm-ag
  :if (package-installed-p 'helm)
  :config
  (setq helm-ag-base-command "rg --color=never --smart-case --no-heading --line-number")
  :ensure t
  )

(use-package helm-projectile
  :if (and (package-installed-p 'helm-ag) (package-installed-p 'projectile))
  :config
  (setq projectile-switch-project-action 'helm-projectile-find-file)
  (global-set-key (kbd "C-x ,") 'helm-ag-project-root)
  :ensure t
  )

#+END_SRC
** Rust
*** Flycheck-Rust
#+BEGIN_SRC emacs-lisp
(use-package flycheck-rust
  :if (and (equal PACKAGEMODE "PRIVATE") (package-installed-p 'flycheck))
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
  :ensure t
  )
#+END_SRC

*** Rust-Mode
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :if (equal PACKAGEMODE "PRIVATE")
  :ensure t)

(use-package racer
  :if (equal PACKAGEMODE "PRIVATE")
  :init
  (if (eq system-type 'gnu/linux)
      (setq racer-cmd "~/.cargo/bin/racer")
    (setq racer-rust-src-path "~/Applications/Rust_source/src/"))
  (if (eq system-type 'windows-nt)
      (setq racer-cmd "~/.cargo/bin/racer")
    (setq racer-rust-src-path "~/Applications/Rust_source/src/"))
  :config
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode)
  :ensure t)

(use-package cargo
  :if (equal PACKAGEMODE "PRIVATE")
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
  :ensure t)

#+END_SRC

** C/C++
*** Flycheck-pkg-config
#+BEGIN_SRC emacs-lisp
(use-package flycheck-pkg-config
  :if (and (equal PACKAGEMODE "PRIVATE") (package-installed-p 'flycheck))
  :ensure t)

#+END_SRC

*** Flycheck C/C++ settings
#+BEGIN_SRC emacs-lisp
(if (equal PACKAGEMODE "PRIVATE")
  (defun flycheck_settings()
    (setq flycheck-clang-language-standard "c++11"))
  (add-hook 'c++-mode-hook 'flycheck_settings)
)
#+END_SRC

*** Hooks
#+BEGIN_SRC emacs-lisp
(if (equal PACKAGEMODE "PRIVATE")
  (defun kill-line_kbd() 
    (define-key c-mode-map "\C-d" 'kill-whole-line)
    (define-key c++-mode-map "\C-d" 'kill-whole-line))
  
  (defun c-hooks()
    (kill-line_kbd))
  
  (add-hook 'c-mode-hook 'c-hooks)
  (add-hook 'c++-mode-hook 'c-hooks)
)
#+END_SRC

*** Company-C
#+BEGIN_SRC emacs-lisp
(use-package company-c-headers
  :if (and (equal PACKAGEMODE "PRIVATE") (package-installed-p 'company))
  :ensure t
  :config
  (add-to-list 'company-backends 'company-c-headers)
  (if (eq system-type 'gnu/linux)
      (lambda()
        (add-to-list 'company-c-headers-path-system "/usr/include/c++/5.2.1")))
  )

#+END_SRC

** Webdev
*** Web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  :ensure t
)
#+END_SRC

*** JavaScript, ES6
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :config
  (add-hook 'js-mode-hook 'js2-minor-mode)
)

(use-package json-mode
  :ensure t
  :config
  (setq js-indent-level 2)
)

(use-package exec-path-from-shell
  :ensure t
)

;; https://github.com/purcell/exec-path-from-shell
;; only need exec-path-from-shell on OSX
;; this hopefully sets up path and other vars better
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

;; disable jshint since we prefer eslint checking
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

;; use eslint with web-mode for jsx files
(flycheck-add-mode 'javascript-eslint 'web-mode)
  
;; disable json-jsonlist checking for json files
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(json-jsonlist)))


(add-to-list 'auto-mode-alist '("\\.js$" . web-mode))

;; adjust indents for web-mode to 2 spaces
(defun my-web-mode-hook ()
  "Hooks for Web mode. Adjust indents"
  ;;; http://web-mode.org/
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))
  (setq web-mode-tag-auto-close-style 0)
(add-hook 'web-mode-hook  'my-web-mode-hook)

;; for better jsx syntax-highlighting in web-mode
(defadvice web-mode-highlight-part (around tweak-jsx activate)
  (if (equal web-mode-content-type "jsx")
    (let ((web-mode-enable-part-face nil))
      ad-do-it)
    ad-do-it))
#+END_SRC

*** Typescript
#+BEGIN_SRC emacs-lisp
(use-package tide
  :ensure t
  :config
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      ;; company is an optional dependency. You have to
      ;; install it separately via package-install
      ;; `M-x package-install [ret] company`
      (company-mode +1))
      ;; aligns annotation to the right hand side
      (setq company-tooltip-align-annotations t)

      ;; formats the buffer before saving
      (add-hook 'before-save-hook 'tide-format-before-save)

      (add-hook 'typescript-mode-hook #'setup-tide-mode)

      ;; format options
      (setq tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t       :placeOpenBraceOnNewLineForFunctions nil))
)
#+END_SRC
*** Elm
#+BEGIN_SRC emacs-lisp
(use-package elm-mode
  :if (equal PACKAGEMODE "PRIVATE")
  :ensure t
  :config
  (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)
  (add-to-list 'company-backends 'company-elm)
  )

#+END_SRC
* Customizations
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC
